# This is a generic workflow for Puppet module CI operations.
name: "Module Acceptance Prep"

on:
  workflow_call:
    inputs:
      runs_on:
        description: "The operating system used for the runner."
        required: false
        default: "ubuntu-latest"
        type: "string"
      flags:
        description: "Additional flags to pass to matrix_from_metadata_v2."
        required: false
        default: ''
        type: "string"
      prepcommand1:
        description: "Additional PrepCommand to run as a preparation Part 1"
        required: false
        default: 'echo'
        type: "string"
      prepcommand2:
        description: "Additional PrepCommand to run as a preparation Part 2"
        required: false
        default: 'echo'
        type: "string"
      command:
        description: "Additional Command to run as a preparation/test/cleanup"
        required: false
        default: 'echo'
        type: "string"
      preinstallpecommands:  
        description: "Additional Commands to install or config PE, running before the installation"
        required: false
        default: 'echo Before Install PE ;'
        type: "string"
      installpecommands:  
        description: "Additional Commands to install or config PE, running after the installation"
        required: false
        default: 'echo Install PE done ;'
        type: "string"
      deploy_petargetinv:
        description: "Path to Inventory to use to run deploy_pe for PE installation. It must contain the target deploy_petarget."
        required: false
        default: 'inventory.yaml'
        type: "string"        
      deploy_petarget:
        description: "Target to run run deploy_pe for PE installation"
        required: false
        default: 'localhost'
        type: "string"        
      deploy_peversion:
        description: "P.E. version to install for deploy_pe"
        required: false
        default: '-'
        type: "string"
      peadm_peversion:
        description: "P.E. version to install for peadm"
        required: false
        default: '-'
        type: "string"        
      ospversion:
        description: "Open Source Puppet version to install, Default as empty to install Puppet Enterprise instead, and set 'L' for latest "
        required: false
        default: ''
        type: "string"        


jobs:
  setup_matrix:
    name: "Setup Test Matrix"
    runs-on: ${{ inputs.runs_on }}
    outputs:
      spec_matrix: ${{ steps.get-matrix.outputs.spec_matrix }}

    env:
      BUNDLE_WITHOUT: release_prep

    steps:

      - name: "Checkout"
        uses: "actions/checkout@v4"
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: "Setup ruby"
        uses: "ruby/setup-ruby@v1"
        with:
          ruby-version: "2.7"
          bundler-cache: true

      - name: "Bundle environment"
        run: |
          echo ::group::bundler environment
          bundle env
          echo ::endgroup::

      - name: Setup Spec Test Matrix
        id: get-matrix
        run: |
          bundle exec matrix_from_metadata_v2 ${{ inputs.flags }}

  spec:
    name: "Spec tests (Puppet: ${{matrix.puppet_version}}, Ruby Ver: ${{matrix.ruby_version}})"
    needs: "setup_matrix"
    runs-on: ${{ inputs.runs_on }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson( needs.setup_matrix.outputs.spec_matrix ) }}

    env:
      BUNDLE_WITHOUT: release_prep
      PUPPET_GEM_VERSION: ${{ matrix.puppet_version }}
      FACTER_GEM_VERSION: 'https://github.com/puppetlabs/facter#main'  # why is this set?

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: "Setup ruby"
        uses: "ruby/setup-ruby@v1"
        with:
          ruby-version: ${{matrix.ruby_version}}
          bundler-cache: true

      - name: "Bundle environment"
        run: |
          echo ::group::bundler environment
          bundle env
          echo ::endgroup::
          
      - name: modify sudo settings
        run: |
          sudo sed -i 's/Defaults env_reset//' /etc/sudoers

      - name: Create the fixtures directory
        run: |
          bundle exec rake spec_prep
          
      - name: install actual bolt
        run: |
          wget https://apt.puppet.com/puppet-tools-release-jammy.deb
          sudo -E dpkg -i puppet-tools-release-jammy.deb
          sudo -E apt-get update 
          sudo -E apt-get -y install puppet-bolt
          sudo -E apt-get -y install curl || sudo -E yum install -y curl || apt-get -y install curl || yum install -y curl
          sudo -E apt-get -y install cron
          sudo -E /usr/local/bin/bolt --modulepath spec/fixtures/modules plan show

      - name: install bolt modules
        run: |
          sudo -E mkdir -p  spec/fixtures/modules
          sudo -E echo ln -s spec/fixtures/modules .modules
          sudo -E /usr/local/bin/bolt project init my_project --modules jarretlavallee-deploy_pe,puppetlabs-peadm
          sudo -E /usr/local/bin/bolt --modulepath spec/fixtures/modules module add jarretlavallee-deploy_pe
          sudo -E /usr/local/bin/bolt --modulepath spec/fixtures/modules module add puppetlabs-peadm
          sudo -E chmod a+rw ./inventory.yaml

      - name: "Run Commands to Check or Cover Pre- PE Installation aka preinstallpecommands"
        run: |
          ${{ inputs.preinstallpecommands }}

      - name: install pe or opensource puppet
        run: |
          if [ !  "${{ inputs.deploy_petargetinv }}" =  "inventory.yaml" -a -e "${{ inputs.deploy_petargetinv }}"  ] ; then 
            cat  "${{ inputs.deploy_petargetinv }}"  > inventory.yaml || echo "Same files cannot update." ;
          elif [ -z "`grep -v '^[ ]*$'  ${{ inputs.deploy_petargetinv }}`" ] ; then 
            echo -e 'groups:\n  - name: pe\n    targets:\n      - uri: localhost\n        vars:\n          roles:\n            - pe' > inventory.yaml ;
          fi ;
          grep -H -n -v -E 'AALINEAANUMBER' ./spec/fixtures/litmus_inventory.yaml ;
          sudo -E /usr/local/bin/bolt --modulepath spec/fixtures/modules plan show
          sudo -E /usr/local/bin/bolt --modulepath spec/fixtures/modules plan run facts targets=${{ inputs.deploy_petarget }}
          if [ -z "${{    ospversion }}" ] ; then
            [ "-" = "${{ inputs.deploy_peversion }}" ] || sudo -E /usr/local/bin/bolt --modulepath spec/fixtures/modules plan run deploy_pe::provision_master targets=${{ inputs.deploy_petarget }} version=${{ inputs.deploy_peversion }} || echo "==Install PE deploy_pe failed==" ;
          else
            curl -q "https://raw.githubusercontent.com/sooyean-hoo/pe_curl_requests/feature/SYInstallerEnhance/installer/download_pe_tarball.sh"  > /tmp/download_pe_tarball.sh ;
            ospversion="${{    ospversion }}"   source /tmp/download_pe_tarball.sh > /tmp/ops.log ;
            pkg2installOSpuppet=$( cat /tmp/ops.log | grep '====OPENSOURCEPUPPET=pkgurl=' | sed -E 's/====OPENSOURCEPUPPET=pkgurl=//' ) ;
            echo "Installing.....  ${pkg2installOSpuppet} " ;
            installPkg ${pkg2installOSpuppet} ;
          fi ;

      - name: "Run Commands to Check or Cover Post PE Installation aka installpecommands"
        run: |
          ${{ inputs.installpecommands }}

      - name: "Run prepCommand Part 1 aka prepcommand1"
        run: |
          ${{ inputs.prepcommand1 }}

      - name: "Run prepCommand Part 2 aka prepcommand2"
        run: |
          ${{ inputs.prepcommand2 }}

      - name: "Run Command aka command"
        run: |
          ${{ inputs.command }}
